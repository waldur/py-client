from enum import Enum


class VmwareVirtualMachineRetrieveFieldItem(str, Enum):
    ACCESS_URL = "access_url"
    BACKEND_ID = "backend_id"
    CLUSTER = "cluster"
    CLUSTER_NAME = "cluster_name"
    CORES = "cores"
    CORES_PER_SOCKET = "cores_per_socket"
    CREATED = "created"
    CUSTOMER = "customer"
    CUSTOMER_ABBREVIATION = "customer_abbreviation"
    CUSTOMER_NAME = "customer_name"
    CUSTOMER_NATIVE_NAME = "customer_native_name"
    DATASTORE = "datastore"
    DATASTORE_NAME = "datastore_name"
    DESCRIPTION = "description"
    DISK = "disk"
    DISKS = "disks"
    ERROR_MESSAGE = "error_message"
    ERROR_TRACEBACK = "error_traceback"
    FOLDER = "folder"
    FOLDER_NAME = "folder_name"
    GUEST_OS = "guest_os"
    GUEST_OS_NAME = "guest_os_name"
    GUEST_POWER_STATE = "guest_power_state"
    IS_LIMIT_BASED = "is_limit_based"
    IS_USAGE_BASED = "is_usage_based"
    MARKETPLACE_CATEGORY_NAME = "marketplace_category_name"
    MARKETPLACE_CATEGORY_UUID = "marketplace_category_uuid"
    MARKETPLACE_OFFERING_NAME = "marketplace_offering_name"
    MARKETPLACE_OFFERING_PLUGIN_OPTIONS = "marketplace_offering_plugin_options"
    MARKETPLACE_OFFERING_UUID = "marketplace_offering_uuid"
    MARKETPLACE_PLAN_UUID = "marketplace_plan_uuid"
    MARKETPLACE_RESOURCE_STATE = "marketplace_resource_state"
    MARKETPLACE_RESOURCE_UUID = "marketplace_resource_uuid"
    MODIFIED = "modified"
    NAME = "name"
    NETWORKS = "networks"
    PORTS = "ports"
    PROJECT = "project"
    PROJECT_NAME = "project_name"
    PROJECT_UUID = "project_uuid"
    RAM = "ram"
    RESOURCE_TYPE = "resource_type"
    RUNTIME_STATE = "runtime_state"
    SERVICE_NAME = "service_name"
    SERVICE_SETTINGS = "service_settings"
    SERVICE_SETTINGS_ERROR_MESSAGE = "service_settings_error_message"
    SERVICE_SETTINGS_STATE = "service_settings_state"
    SERVICE_SETTINGS_UUID = "service_settings_uuid"
    STATE = "state"
    TEMPLATE = "template"
    TEMPLATE_NAME = "template_name"
    TOOLS_INSTALLED = "tools_installed"
    TOOLS_STATE = "tools_state"
    URL = "url"
    UUID = "uuid"

    def __str__(self) -> str:
        return str(self.value)
