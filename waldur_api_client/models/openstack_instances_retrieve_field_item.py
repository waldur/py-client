from enum import Enum


class OpenstackInstancesRetrieveFieldItem(str, Enum):
    ACCESS_URL = "access_url"
    ACTION = "action"
    ACTION_DETAILS = "action_details"
    AVAILABILITY_ZONE = "availability_zone"
    AVAILABILITY_ZONE_NAME = "availability_zone_name"
    BACKEND_ID = "backend_id"
    CONNECT_DIRECTLY_TO_EXTERNAL_NETWORK = "connect_directly_to_external_network"
    CORES = "cores"
    CREATED = "created"
    CUSTOMER = "customer"
    CUSTOMER_ABBREVIATION = "customer_abbreviation"
    CUSTOMER_NAME = "customer_name"
    CUSTOMER_NATIVE_NAME = "customer_native_name"
    DATA_VOLUMES = "data_volumes"
    DATA_VOLUME_SIZE = "data_volume_size"
    DATA_VOLUME_TYPE = "data_volume_type"
    DESCRIPTION = "description"
    DISK = "disk"
    ERROR_MESSAGE = "error_message"
    ERROR_TRACEBACK = "error_traceback"
    EXTERNAL_ADDRESS = "external_address"
    EXTERNAL_IPS = "external_ips"
    FLAVOR = "flavor"
    FLAVOR_DISK = "flavor_disk"
    FLAVOR_NAME = "flavor_name"
    FLOATING_IPS = "floating_ips"
    HYPERVISOR_HOSTNAME = "hypervisor_hostname"
    IMAGE = "image"
    IMAGE_NAME = "image_name"
    INTERNAL_IPS = "internal_ips"
    IS_LIMIT_BASED = "is_limit_based"
    IS_USAGE_BASED = "is_usage_based"
    KEY_FINGERPRINT = "key_fingerprint"
    KEY_NAME = "key_name"
    LATITUDE = "latitude"
    LONGITUDE = "longitude"
    MARKETPLACE_CATEGORY_NAME = "marketplace_category_name"
    MARKETPLACE_CATEGORY_UUID = "marketplace_category_uuid"
    MARKETPLACE_OFFERING_NAME = "marketplace_offering_name"
    MARKETPLACE_OFFERING_PLUGIN_OPTIONS = "marketplace_offering_plugin_options"
    MARKETPLACE_OFFERING_UUID = "marketplace_offering_uuid"
    MARKETPLACE_PLAN_UUID = "marketplace_plan_uuid"
    MARKETPLACE_RESOURCE_STATE = "marketplace_resource_state"
    MARKETPLACE_RESOURCE_UUID = "marketplace_resource_uuid"
    MIN_DISK = "min_disk"
    MIN_RAM = "min_ram"
    MODIFIED = "modified"
    NAME = "name"
    PORTS = "ports"
    PROJECT = "project"
    PROJECT_NAME = "project_name"
    PROJECT_UUID = "project_uuid"
    RAM = "ram"
    RANCHER_CLUSTER = "rancher_cluster"
    RESOURCE_TYPE = "resource_type"
    RUNTIME_STATE = "runtime_state"
    SECURITY_GROUPS = "security_groups"
    SERVER_GROUP = "server_group"
    SERVICE_NAME = "service_name"
    SERVICE_SETTINGS = "service_settings"
    SERVICE_SETTINGS_ERROR_MESSAGE = "service_settings_error_message"
    SERVICE_SETTINGS_STATE = "service_settings_state"
    SERVICE_SETTINGS_UUID = "service_settings_uuid"
    SSH_PUBLIC_KEY = "ssh_public_key"
    START_TIME = "start_time"
    STATE = "state"
    SYSTEM_VOLUME_SIZE = "system_volume_size"
    SYSTEM_VOLUME_TYPE = "system_volume_type"
    TENANT = "tenant"
    TENANT_UUID = "tenant_uuid"
    URL = "url"
    USER_DATA = "user_data"
    UUID = "uuid"
    VOLUMES = "volumes"

    def __str__(self) -> str:
        return str(self.value)
